{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saksh\\\\OneDrive\\\\Documents\\\\Internship-Mechtronix\\\\Mechtronix-A-Project2\\\\client\\\\src\\\\auth\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// client/src/auth/AuthContext.jsx\n\nimport React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\nimport API from '../api/axios'; // Import your configured API instance\nimport { useNotification } from '../components/Notification.jsx'; // Assuming you have this\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\n  const [isAuthenticated, setIsAuthenticated] = useState(!!token);\n  const [loadingAuthState, setLoadingAuthState] = useState(true);\n  const {\n    showTimedMessage\n  } = useNotification();\n\n  // The API.interceptors.request.use in axios.js already handles setting the Authorization header.\n  // We just need to ensure localStorage is updated and the token state reflects it.\n\n  const logout = useCallback(() => {\n    console.log('Logging out...');\n    setUser(null);\n    setToken(null);\n    setIsAuthenticated(false);\n    localStorage.removeItem('token');\n    // The API interceptor will automatically remove the header when token is null\n    showTimedMessage('Logged out successfully.', 3000, 'info');\n  }, [showTimedMessage]);\n\n  // Function to fetch user profile\n  const fetchUserProfile = useCallback(async () => {\n    console.log('fetchUserProfile called. Current token in state:', token ? 'Present' : 'Not present');\n    const currentTokenFromStorage = localStorage.getItem('token'); // Get token from storage for this check\n\n    if (!currentTokenFromStorage) {\n      console.log('No token in localStorage for fetchUserProfile, setting loadingAuthState to false.');\n      setUser(null);\n      setIsAuthenticated(false);\n      setLoadingAuthState(false);\n      return;\n    }\n    try {\n      // API instance from axios.js will automatically attach the token from localStorage\n      console.log('Attempting to fetch profile with token from localStorage...');\n      const response = await API.get('/auth/profile');\n      setUser(response.data);\n      setIsAuthenticated(true);\n      console.log('User profile fetched successfully:', response.data.email);\n    } catch (error) {\n      var _error$response, _error$response2, _error$response2$data, _error$response3, _error$response4, _error$response4$data;\n      console.error('🔐 Auth failed (fetchUserProfile):', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message);\n      // If 401, the interceptor in axios.js should handle logout, but we ensure here too.\n      if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401) {\n        logout(); // Call logout to clear state and localStorage\n      } else {\n        // For other errors, just clear user/auth state\n        setUser(null);\n        setIsAuthenticated(false);\n        localStorage.removeItem('token');\n        setToken(null);\n      }\n      showTimedMessage(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Authentication failed. Please log in again.', 5000, 'error');\n    } finally {\n      setLoadingAuthState(false);\n      console.log('fetchUserProfile finished. loadingAuthState set to false.');\n    }\n  }, [token, logout, showTimedMessage]); // Added token to dependencies\n\n  // Login function\n  const login = useCallback(async (email, password) => {\n    setLoadingAuthState(true); // Indicate that auth state is changing\n    try {\n      const response = await API.post('/auth/login', {\n        email,\n        password\n      });\n      const newToken = response.data.token;\n      localStorage.setItem('token', newToken); // Store token\n      setToken(newToken); // Update state, which will trigger useEffect to fetch profile\n      setIsAuthenticated(true); // Set authenticated\n      // fetchUserProfile will be called by useEffect due to token change\n      showTimedMessage('Login successful!', 3000, 'success');\n      return true;\n    } catch (error) {\n      var _error$response5, _error$response5$data, _error$response6, _error$response6$data;\n      console.error('❌ Login failed:', ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || error.message);\n      showTimedMessage(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Login failed.', 5000, 'error');\n      setLoadingAuthState(false); // Reset loading on login failure\n      return false;\n    }\n  }, [showTimedMessage]);\n\n  // Initial check on component mount and whenever token state changes\n  useEffect(() => {\n    console.log('AuthContext useEffect triggered. Token:', token);\n    if (token) {\n      fetchUserProfile();\n    } else {\n      setLoadingAuthState(false); // No token, so no auth state to load\n    }\n  }, [token, fetchUserProfile]); // Depend on token and fetchUserProfile\n\n  const value = {\n    user,\n    token,\n    isAuthenticated,\n    loadingAuthState,\n    login,\n    logout,\n    // No authAxios needed here, components will use the global API instance\n    isAdmin: (user === null || user === void 0 ? void 0 : user.role) === 'admin',\n    isClient: (user === null || user === void 0 ? void 0 : user.role) === 'client'\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loadingAuthState && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"Qhb8EYboi6msFNjazKYknyn01yQ=\", false, function () {\n  return [useNotification];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useCallback","API","useNotification","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","isAuthenticated","setIsAuthenticated","loadingAuthState","setLoadingAuthState","showTimedMessage","logout","console","log","removeItem","fetchUserProfile","currentTokenFromStorage","response","get","data","email","error","_error$response","_error$response2","_error$response2$data","_error$response3","_error$response4","_error$response4$data","status","message","login","password","post","newToken","setItem","_error$response5","_error$response5$data","_error$response6","_error$response6$data","value","isAdmin","role","isClient","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/saksh/OneDrive/Documents/Internship-Mechtronix/Mechtronix-A-Project2/client/src/auth/AuthContext.jsx"],"sourcesContent":["// client/src/auth/AuthContext.jsx\r\n\r\nimport React, {\r\n    createContext,\r\n    useState,\r\n    useEffect,\r\n    useContext,\r\n    useCallback,\r\n} from 'react';\r\nimport API from '../api/axios'; // Import your configured API instance\r\nimport { useNotification } from '../components/Notification.jsx'; // Assuming you have this\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [token, setToken] = useState(localStorage.getItem('token') || null);\r\n    const [isAuthenticated, setIsAuthenticated] = useState(!!token);\r\n    const [loadingAuthState, setLoadingAuthState] = useState(true);\r\n    const { showTimedMessage } = useNotification();\r\n\r\n    // The API.interceptors.request.use in axios.js already handles setting the Authorization header.\r\n    // We just need to ensure localStorage is updated and the token state reflects it.\r\n\r\n    const logout = useCallback(() => {\r\n        console.log('Logging out...');\r\n        setUser(null);\r\n        setToken(null);\r\n        setIsAuthenticated(false);\r\n        localStorage.removeItem('token');\r\n        // The API interceptor will automatically remove the header when token is null\r\n        showTimedMessage('Logged out successfully.', 3000, 'info');\r\n    }, [showTimedMessage]);\r\n\r\n    // Function to fetch user profile\r\n    const fetchUserProfile = useCallback(async () => {\r\n        console.log('fetchUserProfile called. Current token in state:', token ? 'Present' : 'Not present');\r\n        const currentTokenFromStorage = localStorage.getItem('token'); // Get token from storage for this check\r\n\r\n        if (!currentTokenFromStorage) {\r\n            console.log('No token in localStorage for fetchUserProfile, setting loadingAuthState to false.');\r\n            setUser(null);\r\n            setIsAuthenticated(false);\r\n            setLoadingAuthState(false);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // API instance from axios.js will automatically attach the token from localStorage\r\n            console.log('Attempting to fetch profile with token from localStorage...');\r\n            const response = await API.get('/auth/profile');\r\n            setUser(response.data);\r\n            setIsAuthenticated(true);\r\n            console.log('User profile fetched successfully:', response.data.email);\r\n        } catch (error) {\r\n            console.error('🔐 Auth failed (fetchUserProfile):', error.response?.status, error.response?.data?.message || error.message);\r\n            // If 401, the interceptor in axios.js should handle logout, but we ensure here too.\r\n            if (error.response?.status === 401) {\r\n                logout(); // Call logout to clear state and localStorage\r\n            } else {\r\n                // For other errors, just clear user/auth state\r\n                setUser(null);\r\n                setIsAuthenticated(false);\r\n                localStorage.removeItem('token');\r\n                setToken(null);\r\n            }\r\n            showTimedMessage(error.response?.data?.message || 'Authentication failed. Please log in again.', 5000, 'error');\r\n        } finally {\r\n            setLoadingAuthState(false);\r\n            console.log('fetchUserProfile finished. loadingAuthState set to false.');\r\n        }\r\n    }, [token, logout, showTimedMessage]); // Added token to dependencies\r\n\r\n    // Login function\r\n    const login = useCallback(async (email, password) => {\r\n        setLoadingAuthState(true); // Indicate that auth state is changing\r\n        try {\r\n            const response = await API.post('/auth/login', { email, password });\r\n            const newToken = response.data.token;\r\n            localStorage.setItem('token', newToken); // Store token\r\n            setToken(newToken); // Update state, which will trigger useEffect to fetch profile\r\n            setIsAuthenticated(true); // Set authenticated\r\n            // fetchUserProfile will be called by useEffect due to token change\r\n            showTimedMessage('Login successful!', 3000, 'success');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('❌ Login failed:', error.response?.data?.message || error.message);\r\n            showTimedMessage(error.response?.data?.message || 'Login failed.', 5000, 'error');\r\n            setLoadingAuthState(false); // Reset loading on login failure\r\n            return false;\r\n        }\r\n    }, [showTimedMessage]);\r\n\r\n    // Initial check on component mount and whenever token state changes\r\n    useEffect(() => {\r\n        console.log('AuthContext useEffect triggered. Token:', token);\r\n        if (token) {\r\n            fetchUserProfile();\r\n        } else {\r\n            setLoadingAuthState(false); // No token, so no auth state to load\r\n        }\r\n    }, [token, fetchUserProfile]); // Depend on token and fetchUserProfile\r\n\r\n    const value = {\r\n        user,\r\n        token,\r\n        isAuthenticated,\r\n        loadingAuthState,\r\n        login,\r\n        logout,\r\n        // No authAxios needed here, components will use the global API instance\r\n        isAdmin: user?.role === 'admin',\r\n        isClient: user?.role === 'client',\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {/* Render children only when auth state is done loading to prevent flickering */}\r\n            {!loadingAuthState && children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}