{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saksh\\\\OneDrive\\\\Documents\\\\Internship-Mechtronix\\\\Mechtronix-A-Project2\\\\client\\\\src\\\\context\\\\ThemeContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// client/src/context/ThemeContext.jsx\n\nimport React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\n\n// Create the ThemeContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(null);\n\n// Custom hook to use the ThemeContext easily\nexport const useTheme = () => {\n  _s();\n  return useContext(ThemeContext);\n};\n\n// ThemeProvider component\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  // Initialize theme from localStorage or default to 'light'\n  const [theme, setTheme] = useState(() => {\n    const savedTheme = localStorage.getItem('theme');\n    // Check user's system preference if no theme is saved\n    if (savedTheme) {\n      return savedTheme;\n    }\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  });\n\n  // Effect to apply the theme class to the documentElement (html tag)\n  // and save the preference to localStorage\n  useEffect(() => {\n    const root = window.document.documentElement;\n    // Remove existing theme classes\n    root.classList.remove('light', 'dark');\n    // Add the current theme class\n    root.classList.add(theme);\n    // Save to localStorage\n    localStorage.setItem('theme', theme);\n  }, [theme]); // Re-run whenever theme changes\n\n  // Function to toggle between 'light' and 'dark' themes\n  const toggleTheme = useCallback(() => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  }, []);\n  const themeContextValue = {\n    theme,\n    toggleTheme\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: themeContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s2(ThemeProvider, \"RA5bkq5jOd4BGgVSb+BunBZ97Dc=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useCallback","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","ThemeProvider","children","_s2","theme","setTheme","savedTheme","localStorage","getItem","window","matchMedia","matches","root","document","documentElement","classList","remove","add","setItem","toggleTheme","prevTheme","themeContextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/saksh/OneDrive/Documents/Internship-Mechtronix/Mechtronix-A-Project2/client/src/context/ThemeContext.jsx"],"sourcesContent":["// client/src/context/ThemeContext.jsx\r\n\r\nimport React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\r\n\r\n// Create the ThemeContext\r\nconst ThemeContext = createContext(null);\r\n\r\n// Custom hook to use the ThemeContext easily\r\nexport const useTheme = () => useContext(ThemeContext);\r\n\r\n// ThemeProvider component\r\nexport const ThemeProvider = ({ children }) => {\r\n    // Initialize theme from localStorage or default to 'light'\r\n    const [theme, setTheme] = useState(() => {\r\n        const savedTheme = localStorage.getItem('theme');\r\n        // Check user's system preference if no theme is saved\r\n        if (savedTheme) {\r\n            return savedTheme;\r\n        }\r\n        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\r\n    });\r\n\r\n    // Effect to apply the theme class to the documentElement (html tag)\r\n    // and save the preference to localStorage\r\n    useEffect(() => {\r\n        const root = window.document.documentElement;\r\n        // Remove existing theme classes\r\n        root.classList.remove('light', 'dark');\r\n        // Add the current theme class\r\n        root.classList.add(theme);\r\n        // Save to localStorage\r\n        localStorage.setItem('theme', theme);\r\n    }, [theme]); // Re-run whenever theme changes\r\n\r\n    // Function to toggle between 'light' and 'dark' themes\r\n    const toggleTheme = useCallback(() => {\r\n        setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));\r\n    }, []);\r\n\r\n    const themeContextValue = {\r\n        theme,\r\n        toggleTheme,\r\n    };\r\n\r\n    return (\r\n        <ThemeContext.Provider value={themeContextValue}>\r\n            {children}\r\n        </ThemeContext.Provider>\r\n    );\r\n};\r\n \r\n"],"mappings":";;;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,EAAEC,WAAW,QAAQ,OAAO;;AAE1F;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGP,aAAa,CAAC,IAAI,CAAC;;AAExC;AACA,OAAO,MAAMQ,QAAQ,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,UAAU,CAACI,YAAY,CAAC;AAAA;;AAEtD;AAAAE,EAAA,CAFaD,QAAQ;AAGrB,OAAO,MAAME,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC3C;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,MAAM;IACrC,MAAMc,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD;IACA,IAAIF,UAAU,EAAE;MACZ,OAAOA,UAAU;IACrB;IACA,OAAOG,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,GAAG,MAAM,GAAG,OAAO;EACvF,CAAC,CAAC;;EAEF;EACA;EACAlB,SAAS,CAAC,MAAM;IACZ,MAAMmB,IAAI,GAAGH,MAAM,CAACI,QAAQ,CAACC,eAAe;IAC5C;IACAF,IAAI,CAACG,SAAS,CAACC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC;IACtC;IACAJ,IAAI,CAACG,SAAS,CAACE,GAAG,CAACb,KAAK,CAAC;IACzB;IACAG,YAAY,CAACW,OAAO,CAAC,OAAO,EAAEd,KAAK,CAAC;EACxC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEb;EACA,MAAMe,WAAW,GAAGxB,WAAW,CAAC,MAAM;IAClCU,QAAQ,CAAEe,SAAS,IAAMA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACvE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,iBAAiB,GAAG;IACtBjB,KAAK;IACLe;EACJ,CAAC;EAED,oBACItB,OAAA,CAACC,YAAY,CAACwB,QAAQ;IAACC,KAAK,EAAEF,iBAAkB;IAAAnB,QAAA,EAC3CA;EAAQ;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAEhC,CAAC;AAACxB,GAAA,CAtCWF,aAAa;AAAA2B,EAAA,GAAb3B,aAAa;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}