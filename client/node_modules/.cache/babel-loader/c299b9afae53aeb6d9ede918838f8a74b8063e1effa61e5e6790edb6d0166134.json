{"ast":null,"code":"// client/src/api/axios.js\n\nimport axios from 'axios';\n\n// Create an Axios instance with a base URL\nconst API = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  // IMPORTANT: Ensure this matches your backend URL\n  withCredentials: true // If you plan to send cookies (e.g., for refresh tokens)\n});\n\n// Request interceptor to add the JWT token to headers before each request\nAPI.interceptors.request.use(config => {\n  // Get the token from localStorage\n  const token = localStorage.getItem('token');\n  if (token) {\n    // If token exists, add it to the Authorization header as a Bearer token\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config; // Return the modified config\n}, error => {\n  // Handle request errors\n  return Promise.reject(error);\n});\n\n// Response interceptor (optional, but useful for global error handling or refresh tokens)\nAPI.interceptors.response.use(response => response,\n// Just return the response if successful\nerror => {\n  // Handle global errors, e.g., 401 Unauthorized\n  if (error.response && error.response.status === 401) {\n    // Optionally, redirect to login or clear token if unauthorized\n    console.error('Unauthorized request. Token might be invalid or expired.');\n    // Example: localStorage.removeItem('token');\n    // Example: window.location.href = '/login'; // Redirect to login page\n  }\n  return Promise.reject(error); // Propagate the error\n});\nexport default API; // Export the configured Axios instance","map":{"version":3,"names":["axios","API","create","baseURL","withCredentials","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","status","console"],"sources":["C:/Users/saksh/OneDrive/Documents/Internship-Mechtronix/Mechtronix-A-Project2/client/src/api/axios.js"],"sourcesContent":["// client/src/api/axios.js\r\n\r\nimport axios from 'axios';\r\n\r\n// Create an Axios instance with a base URL\r\nconst API = axios.create({\r\n    baseURL: 'http://localhost:5000/api', // IMPORTANT: Ensure this matches your backend URL\r\n    withCredentials: true, // If you plan to send cookies (e.g., for refresh tokens)\r\n});\r\n\r\n// Request interceptor to add the JWT token to headers before each request\r\nAPI.interceptors.request.use(\r\n    (config) => {\r\n        // Get the token from localStorage\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            // If token exists, add it to the Authorization header as a Bearer token\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config; // Return the modified config\r\n    },\r\n    (error) => {\r\n        // Handle request errors\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Response interceptor (optional, but useful for global error handling or refresh tokens)\r\nAPI.interceptors.response.use(\r\n    (response) => response, // Just return the response if successful\r\n    (error) => {\r\n        // Handle global errors, e.g., 401 Unauthorized\r\n        if (error.response && error.response.status === 401) {\r\n            // Optionally, redirect to login or clear token if unauthorized\r\n            console.error('Unauthorized request. Token might be invalid or expired.');\r\n            // Example: localStorage.removeItem('token');\r\n            // Example: window.location.href = '/login'; // Redirect to login page\r\n        }\r\n        return Promise.reject(error); // Propagate the error\r\n    }\r\n);\r\n\r\nexport default API; // Export the configured Axios instance\r\n\r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,eAAe,EAAE,IAAI,CAAE;AAC3B,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACvBC,MAAM,IAAK;EACR;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACP;IACAD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM,CAAC,CAAC;AACnB,CAAC,EACAM,KAAK,IAAK;EACP;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAb,GAAG,CAACI,YAAY,CAACY,QAAQ,CAACV,GAAG,CACxBU,QAAQ,IAAKA,QAAQ;AAAE;AACvBH,KAAK,IAAK;EACP;EACA,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACjD;IACAC,OAAO,CAACL,KAAK,CAAC,0DAA0D,CAAC;IACzE;IACA;EACJ;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC,CAAC;AAClC,CACJ,CAAC;AAED,eAAeb,GAAG,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}