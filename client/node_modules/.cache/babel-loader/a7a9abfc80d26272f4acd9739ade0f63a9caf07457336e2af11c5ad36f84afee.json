{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\saksh\\\\OneDrive\\\\Documents\\\\Internship-Mechtronix\\\\Mechtronix-A-Project2\\\\client\\\\src\\\\auth\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// client/src/auth/AuthContext.jsx\n\nimport React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\nimport axios from 'axios'; // Use plain axios here, not your custom API instance\nimport { useNotification } from '../components/Notification.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\n  const [isAuthenticated, setIsAuthenticated] = useState(!!token);\n  const [loadingAuthState, setLoadingAuthState] = useState(true);\n  const {\n    showTimedMessage\n  } = useNotification();\n\n  // Create an Axios instance specifically for authenticated requests\n  // This instance will have interceptors to manage the token\n  const authAxios = axios.create({\n    baseURL: 'http://localhost:5000/api',\n    // Your backend API base URL\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n\n  // Request Interceptor: Attach the latest token to every outgoing request\n  authAxios.interceptors.request.use(config => {\n    const currentToken = localStorage.getItem('token'); // Always get the freshest token from localStorage\n    if (currentToken) {\n      config.headers.Authorization = `Bearer ${currentToken}`;\n    }\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n\n  // Response Interceptor: Handle 401 Unauthorized errors globally\n  const logout = useCallback(() => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n    setIsAuthenticated(false);\n    showTimedMessage('Logged out successfully.', 3000, 'info');\n  }, [showTimedMessage]);\n  authAxios.interceptors.response.use(response => response, error => {\n    if (error.response && error.response.status === 401) {\n      console.error('🔐 Auth failed (Interceptor): Unauthorized or invalid token. Logging out.');\n      logout(); // Log out user on 401\n      showTimedMessage('Session expired or unauthorized. Please log in again.', 5000, 'error');\n    }\n    return Promise.reject(error);\n  });\n\n  // Function to fetch user profile\n  const fetchUserProfile = useCallback(async authToken => {\n    if (!authToken) {\n      setUser(null);\n      setIsAuthenticated(false);\n      setLoadingAuthState(false);\n      return;\n    }\n    try {\n      // Use authAxios here, as it will automatically attach the token\n      const response = await authAxios.get('/auth/profile');\n      setUser(response.data);\n      setIsAuthenticated(true);\n      console.log('✅ User profile fetched:', response.data.email);\n    } catch (error) {\n      var _error$response, _error$response2, _error$response2$data;\n      // Error handling for fetchUserProfile is now largely handled by the interceptor\n      // But we keep this for initial setup or if interceptor somehow misses it.\n      console.error('🔐 Auth failed (fetchUserProfile):', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message);\n      setUser(null);\n      setIsAuthenticated(false);\n      localStorage.removeItem('token'); // Ensure token is cleared\n      setToken(null);\n    } finally {\n      setLoadingAuthState(false);\n    }\n  }, [logout, authAxios]); // Depend on logout and authAxios\n\n  // Login function\n  const login = useCallback(async (email, password) => {\n    setLoadingAuthState(true); // Set loading true during login attempt\n    try {\n      const response = await axios.post('http://localhost:5000/api/auth/login', {\n        email,\n        password\n      });\n      const newToken = response.data.token;\n      localStorage.setItem('token', newToken); // Store token\n      setToken(newToken); // Update state\n      setIsAuthenticated(true); // Set authenticated immediately\n      await fetchUserProfile(newToken); // Fetch user profile\n      showTimedMessage('Login successful!', 3000, 'success');\n      return true;\n    } catch (error) {\n      var _error$response3, _error$response3$data, _error$response4, _error$response4$data;\n      console.error('❌ Login failed:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || error.message);\n      showTimedMessage(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Login failed.', 5000, 'error');\n      setLoadingAuthState(false); // Reset loading on login failure\n      return false;\n    }\n  }, [fetchUserProfile, showTimedMessage]);\n\n  // Initial check on component mount/token change\n  useEffect(() => {\n    if (token) {\n      fetchUserProfile(token);\n    } else {\n      setLoadingAuthState(false); // No token, so no auth state to load\n    }\n  }, [token, fetchUserProfile]); // Re-run if token changes or fetchUserProfile changes\n\n  const value = {\n    user,\n    token,\n    isAuthenticated,\n    loadingAuthState,\n    login,\n    logout,\n    authAxios,\n    // EXPOSE THE AUTHENTICATED AXIOS INSTANCE\n    // No longer need authError or authActionInProgress if not used elsewhere\n    isAdmin: (user === null || user === void 0 ? void 0 : user.role) === 'admin',\n    // Add isAdmin helper\n    isClient: (user === null || user === void 0 ? void 0 : user.role) === 'client' // Add isClient helper\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loadingAuthState && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"Qhb8EYboi6msFNjazKYknyn01yQ=\", false, function () {\n  return [useNotification];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useCallback","axios","useNotification","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","isAuthenticated","setIsAuthenticated","loadingAuthState","setLoadingAuthState","showTimedMessage","authAxios","create","baseURL","headers","interceptors","request","use","config","currentToken","Authorization","error","Promise","reject","logout","removeItem","response","status","console","fetchUserProfile","authToken","get","data","log","email","_error$response","_error$response2","_error$response2$data","message","login","password","post","newToken","setItem","_error$response3","_error$response3$data","_error$response4","_error$response4$data","value","isAdmin","role","isClient","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/saksh/OneDrive/Documents/Internship-Mechtronix/Mechtronix-A-Project2/client/src/auth/AuthContext.jsx"],"sourcesContent":["// client/src/auth/AuthContext.jsx\r\n\r\nimport React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\r\nimport axios from 'axios'; // Use plain axios here, not your custom API instance\r\nimport { useNotification } from '../components/Notification.jsx';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [token, setToken] = useState(localStorage.getItem('token') || null);\r\n    const [isAuthenticated, setIsAuthenticated] = useState(!!token);\r\n    const [loadingAuthState, setLoadingAuthState] = useState(true);\r\n    const { showTimedMessage } = useNotification();\r\n\r\n    // Create an Axios instance specifically for authenticated requests\r\n    // This instance will have interceptors to manage the token\r\n    const authAxios = axios.create({\r\n        baseURL: 'http://localhost:5000/api', // Your backend API base URL\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    });\r\n\r\n    // Request Interceptor: Attach the latest token to every outgoing request\r\n    authAxios.interceptors.request.use(\r\n        (config) => {\r\n            const currentToken = localStorage.getItem('token'); // Always get the freshest token from localStorage\r\n            if (currentToken) {\r\n                config.headers.Authorization = `Bearer ${currentToken}`;\r\n            }\r\n            return config;\r\n        },\r\n        (error) => {\r\n            return Promise.reject(error);\r\n        }\r\n    );\r\n\r\n    // Response Interceptor: Handle 401 Unauthorized errors globally\r\n    const logout = useCallback(() => {\r\n        localStorage.removeItem('token');\r\n        setToken(null);\r\n        setUser(null);\r\n        setIsAuthenticated(false);\r\n        showTimedMessage('Logged out successfully.', 3000, 'info');\r\n    }, [showTimedMessage]);\r\n\r\n    authAxios.interceptors.response.use(\r\n        (response) => response,\r\n        (error) => {\r\n            if (error.response && error.response.status === 401) {\r\n                console.error('🔐 Auth failed (Interceptor): Unauthorized or invalid token. Logging out.');\r\n                logout(); // Log out user on 401\r\n                showTimedMessage('Session expired or unauthorized. Please log in again.', 5000, 'error');\r\n            }\r\n            return Promise.reject(error);\r\n        }\r\n    );\r\n\r\n    // Function to fetch user profile\r\n    const fetchUserProfile = useCallback(async (authToken) => {\r\n        if (!authToken) {\r\n            setUser(null);\r\n            setIsAuthenticated(false);\r\n            setLoadingAuthState(false);\r\n            return;\r\n        }\r\n        try {\r\n            // Use authAxios here, as it will automatically attach the token\r\n            const response = await authAxios.get('/auth/profile');\r\n            setUser(response.data);\r\n            setIsAuthenticated(true);\r\n            console.log('✅ User profile fetched:', response.data.email);\r\n        } catch (error) {\r\n            // Error handling for fetchUserProfile is now largely handled by the interceptor\r\n            // But we keep this for initial setup or if interceptor somehow misses it.\r\n            console.error('🔐 Auth failed (fetchUserProfile):', error.response?.status, error.response?.data?.message || error.message);\r\n            setUser(null);\r\n            setIsAuthenticated(false);\r\n            localStorage.removeItem('token'); // Ensure token is cleared\r\n            setToken(null);\r\n        } finally {\r\n            setLoadingAuthState(false);\r\n        }\r\n    }, [logout, authAxios]); // Depend on logout and authAxios\r\n\r\n    // Login function\r\n    const login = useCallback(async (email, password) => {\r\n        setLoadingAuthState(true); // Set loading true during login attempt\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/api/auth/login', { email, password });\r\n            const newToken = response.data.token;\r\n            localStorage.setItem('token', newToken); // Store token\r\n            setToken(newToken); // Update state\r\n            setIsAuthenticated(true); // Set authenticated immediately\r\n            await fetchUserProfile(newToken); // Fetch user profile\r\n            showTimedMessage('Login successful!', 3000, 'success');\r\n            return true;\r\n        } catch (error) {\r\n            console.error('❌ Login failed:', error.response?.data?.message || error.message);\r\n            showTimedMessage(error.response?.data?.message || 'Login failed.', 5000, 'error');\r\n            setLoadingAuthState(false); // Reset loading on login failure\r\n            return false;\r\n        }\r\n    }, [fetchUserProfile, showTimedMessage]);\r\n\r\n    // Initial check on component mount/token change\r\n    useEffect(() => {\r\n        if (token) {\r\n            fetchUserProfile(token);\r\n        } else {\r\n            setLoadingAuthState(false); // No token, so no auth state to load\r\n        }\r\n    }, [token, fetchUserProfile]); // Re-run if token changes or fetchUserProfile changes\r\n\r\n    const value = {\r\n        user,\r\n        token,\r\n        isAuthenticated,\r\n        loadingAuthState,\r\n        login,\r\n        logout,\r\n        authAxios, // EXPOSE THE AUTHENTICATED AXIOS INSTANCE\r\n        // No longer need authError or authActionInProgress if not used elsewhere\r\n        isAdmin: user?.role === 'admin', // Add isAdmin helper\r\n        isClient: user?.role === 'client', // Add isClient helper\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {/* Render children only when auth state is done loading to prevent flickering */}\r\n            {!loadingAuthState && children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}